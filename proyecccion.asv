function [p3d] = proyecccion(head_surface,p2d,angulo)
K = [ 1.017215234570303e+03,                      0,                     3.195000000000000e+02, 0; 
                          0,  1.012549014668498e+03,2.395000000000000e+02,                      0; 
                          0,                      0,               1.0000,                      0; 
                          0,                      0,                    0,                      0]; 
R_World_to_Cam = [-0.0113242625465167   -0.999822053685344   0.0151163536128891   141.173585444427; 
                   0.00842007509644635   -0.0152123858102325   -0.999848810645587   1611.96528372161; 
                     0.999900032304804   -0.0111955728474261   0.00859117128537919   847.090629282911; 
                                     0                     0                     0                  1]; 
P = K * R_World_to_Cam; 
M_Mat = P(1:3,1:3);                 % Matrix M is the "top-front" 3x3 part 
p_4 = P(1:3,4);                     % Vector p_4 is the "top-rear" 1x3 part 
C_tilde = - inv( M_Mat ) * p_4;     % calculate C_tilde 

%Primero: Convertir a cartesiano el punto en 2D:
A = imread('1.jpg');
x = ft_plot_mesh(head_surface);
view(180,90);
rotate(x,[0 1 0],angulo);
imagen = getframe;
img = imagen.cdata;
[a b] = size(img);
RA = imref2d(size(img),b,a)
figure
imshow(img,'DisplayRange',[0 512])
axis on
[xWorld,yWorld] = intrinsicToWorld(RA,p2d(1),p2d(2))







p2d=[p2d,0]';
X_Tilde_1 = inv( M_Mat ) * p2d; 
mue_N_1 = -C_tilde(3) / X_Tilde_1(3); 

p3d = mue_N_1 * inv( M_Mat ) * p2d + C_tilde; 

